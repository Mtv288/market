from datetime import datetime
from decimal import Decimal
from sqlalchemy import ForeignKey, Numeric, Boolean, DateTime
from sqlalchemy.orm import DeclarativeBase, mapped_column, Mapped, relationship


class Base(DeclarativeBase):
    pass


# üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
class User(Base):
    __tablename__ = "users"

    id: Mapped[int] = mapped_column(primary_key=True, comment="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    email: Mapped[str] = mapped_column(nullable=False, unique=True, comment="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞")
    password_hash: Mapped[str] = mapped_column(nullable=False, comment="–•—ç—à –ø–∞—Ä–æ–ª—è")
    name: Mapped[str] = mapped_column(nullable=False, comment="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    is_seller: Mapped[bool] = mapped_column(nullable=False, default=False, comment="–ü—Ä–∏–∑–Ω–∞–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞")

    goods = relationship("Goods", back_populates="seller")
    orders = relationship("Order", back_populates="user")
    reviews = relationship("Review", back_populates="user")
    cart_items = relationship("CartItem", back_populates="user")


# üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
class Category(Base):
    __tablename__ = "categories"

    id: Mapped[int] = mapped_column(primary_key=True, comment="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    name: Mapped[str] = mapped_column(nullable=False, unique=True, comment="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    goods = relationship("Goods", back_populates="category")


#  –ë—Ä–µ–Ω–¥—ã —Ç–æ–≤–∞—Ä–æ–≤
class Brand(Base):
    __tablename__ = "brands"

    id: Mapped[int] = mapped_column(primary_key=True, comment="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –±—Ä–µ–Ω–¥–∞")
    name: Mapped[str] = mapped_column(nullable=False, unique=True, comment="–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞")

    goods = relationship("Goods", back_populates="brand")


#  –¢–æ–≤–∞—Ä—ã
class Goods(Base):
    __tablename__ = "goods"

    id: Mapped[int] = mapped_column(primary_key=True, comment="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞")
    name: Mapped[str] = mapped_column(nullable=False, comment="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    description: Mapped[str] = mapped_column(nullable=False, comment="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    price: Mapped[Decimal] = mapped_column(Numeric(10, 2), nullable=False, comment="–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞")
    quantity: Mapped[int] = mapped_column(nullable=False, comment="–î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    certificate: Mapped[str | None] = mapped_column(nullable=True, comment="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)")

    seller_id: Mapped[int] = mapped_column(ForeignKey("users.id"), nullable=False, comment="ID –ø—Ä–æ–¥–∞–≤—Ü–∞")
    category_id: Mapped[int] = mapped_column(ForeignKey("categories.id"), nullable=False, comment="ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    brand_id: Mapped[int] = mapped_column(ForeignKey("brands.id"), nullable=True, comment="ID –±—Ä–µ–Ω–¥–∞")

    seller = relationship("User", back_populates="goods")
    category = relationship("Category", back_populates="goods")
    brand = relationship("Brand", back_populates="goods")

    order_items = relationship("OrderItem", back_populates="goods")
    reviews = relationship("Review", back_populates="goods")
    cart_items = relationship("CartItem", back_populates="goods")


#  –ó–∞–∫–∞–∑—ã
class Order(Base):
    __tablename__ = "orders"

    id: Mapped[int] = mapped_column(primary_key=True, comment="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞")
    user_id: Mapped[int] = mapped_column(ForeignKey("users.id"), nullable=False, comment="ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è")
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow, comment="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    total_amount: Mapped[Decimal] = mapped_column(Numeric(10, 2), nullable=False, comment="–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞")

    user = relationship("User", back_populates="orders")
    items = relationship("OrderItem", back_populates="order")
    payment = relationship("Payment", back_populates="order", uselist=False)


# –ü–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑–µ
class OrderItem(Base):
    __tablename__ = "order_items"

    id: Mapped[int] = mapped_column(primary_key=True, comment="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–∑–∏—Ü–∏–∏")
    order_id: Mapped[int] = mapped_column(ForeignKey("orders.id"), nullable=False, comment="ID –∑–∞–∫–∞–∑–∞")
    goods_id: Mapped[int] = mapped_column(ForeignKey("goods.id"), nullable=False, comment="ID —Ç–æ–≤–∞—Ä–∞")
    quantity: Mapped[int] = mapped_column(nullable=False, comment="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    price_at_purchase: Mapped[Decimal] = mapped_column(Numeric(10, 2), nullable=False, comment="–¶–µ–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∏")

    order = relationship("Order", back_populates="items")
    goods = relationship("Goods", back_populates="order_items")


# –û—Ç–∑—ã–≤—ã
class Review(Base):
    __tablename__ = "reviews"

    id: Mapped[int] = mapped_column(primary_key=True, comment="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ—Ç–∑—ã–≤–∞")
    user_id: Mapped[int] = mapped_column(ForeignKey("users.id"), nullable=False, comment="ID –∞–≤—Ç–æ—Ä–∞")
    goods_id: Mapped[int] = mapped_column(ForeignKey("goods.id"), nullable=False, comment="ID —Ç–æ–≤–∞—Ä–∞")
    rating: Mapped[int] = mapped_column(nullable=False, comment="–û—Ü–µ–Ω–∫–∞ (1‚Äì5)")
    comment: Mapped[str] = mapped_column(nullable=True, comment="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

    user = relationship("User", back_populates="reviews")
    goods = relationship("Goods", back_populates="reviews")


# –û–ø–ª–∞—Ç—ã
class Payment(Base):
    __tablename__ = "payments"

    id: Mapped[int] = mapped_column(primary_key=True, comment="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ–ø–ª–∞—Ç—ã")
    order_id: Mapped[int] = mapped_column(ForeignKey("orders.id"), nullable=False, comment="ID –∑–∞–∫–∞–∑–∞")
    payment_date: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow, comment="–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã")
    amount: Mapped[Decimal] = mapped_column(Numeric(10, 2), nullable=False, comment="–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã")
    payment_method: Mapped[str] = mapped_column(nullable=False, comment="–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã (–∫–∞—Ä—Ç–∞, PayPal –∏ —Ç.–ø.)")

    order = relationship("Order", back_populates="payment")


# –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class CartItem(Base):
    __tablename__ = "cart_items"

    id: Mapped[int] = mapped_column(primary_key=True, comment="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ")
    user_id: Mapped[int] = mapped_column(ForeignKey("users.id"), nullable=False, comment="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    goods_id: Mapped[int] = mapped_column(ForeignKey("goods.id"), nullable=False, comment="ID –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
    quantity: Mapped[int] = mapped_column(nullable=False, comment="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ")

    user = relationship("User", back_populates="cart_items")
    goods = relationship("Goods", back_populates="cart_items")
